# wrangler.toml
name = "earthquake"
compatibility_date = "2024-06-05" # Feel free to update to a more recent date
compatibility_flags = ["nodejs_compat"]
main = "src/worker.js"

# Top-level main and workers_dev removed, now in [env.production]

# Top-level bindings can define defaults or include preview IDs for 'wrangler dev'
kv_namespaces = [
  { binding = "CLUSTER_KV", id = "2e7c7b5faf2f47868a048bd8043edebc", preview_id = "25424bdebf90459ea61121e9b3dfc4ee" }
]

[[d1_databases]]
binding = "DB" # Binding name used in your Worker code
database_name = "PrimaryDB" # Name of the D1 database (used in wrangler d1 commands)
database_id = "8a0a26e9-ba3c-4984-9023-c1803f611a05" # Production D1 ID
preview_database_id = "57ba069c-5763-41c3-965d-0df87b0ef26b" # Preview D1 ID for `wrangler dev`
# Migrations are typically handled by convention (./migrations directory)
# or by a top-level `migrations_dir` setting, not within [[d1_databases]].
# The previously existing `migrations = [...]` array within d1_databases was causing an error.
# Wrangler should automatically detect the ./migrations directory for "PrimaryDB".

[assets]
directory = "./dist"
not_found_handling = "single-page-application"
binding = "ASSETS"
run_worker_first = true

# KV Namespace binding for cluster definitions
# -----------------------------------------------------------------------------------------
# IMPORTANT INSTRUCTIONS FOR THE USER:
# 1. Create KV Namespaces:
#    You need to create KV namespaces using the Wrangler CLI. It's recommended to have
#    separate namespaces for production and preview/local development.
#    Run these commands in your terminal:
#      wrangler kv namespace create CLUSTER_KV
#      wrangler kv namespace create CLUSTER_KV_PREVIEW
#
# 2. Update IDs Below:
#    Wrangler will output an 'id' for each namespace created.
#    Replace "REPLACE_WITH_PRODUCTION_KV_ID" with the ID for CLUSTER_KV.
#    Replace "REPLACE_WITH_PREVIEW_KV_ID" with the ID for CLUSTER_KV_PREVIEW.
#
# 3. Dashboard Configuration (Crucial for Git-integrated Workers):
#    For Cloudflare Workers projects using Git integration, bindings set in the
#    Cloudflare Dashboard (Worker -> Settings -> Variables & Secrets -> KV Namespace Bindings)
#    often take precedence for deployed environments (production and preview).
#    Ensure you also configure the 'CLUSTER_KV' binding there, pointing it to the
#    respective KV namespaces for your production and preview environments.
#    This wrangler.toml configuration is especially useful for local development
#    with `wrangler dev`.
# -----------------------------------------------------------------------------------------

[env.preview]
name = "earthquake-preview" # It's good practice to give preview a distinct name
main = "src/worker.js"
workers_dev = true # Assuming preview might also use a *.workers.dev subdomain initially

# Use preview specific IDs for bindings
kv_namespaces = [
  { binding = "CLUSTER_KV", preview_id = "25424bdebf90459ea61121e9b3dfc4ee" }
]
d1_databases = [
  { binding = "DB", database_name = "PrimaryDB", preview_database_id = "57ba069c-5763-41c3-965d-0df87b0ef26b" }
]

# Production environment configuration
[env.production]
name = "earthquake" # Explicitly set name for production environment
main = "src/worker.js"
workers_dev = true # Set to false if using custom domain for production and not workers.dev
kv_namespaces = [
  { binding = "CLUSTER_KV", id = "2e7c7b5faf2f47868a048bd8043edebc" } # Production KV
]
d1_databases = [
  { binding = "DB", database_name = "PrimaryDB", database_id = "8a0a26e9-ba3c-4984-9023-c1803f611a05" } # Production D1
]

# Example of other potential configurations (uncomment and adjust if needed):
# [vars]
# MY_VARIABLE = "production_value"
#
# [env.preview.vars]
# MY_VARIABLE = "preview_value"
#
# [env.dev.vars] # For 'wrangler dev'
# MY_VARIABLE = "dev_value"

# This explicitly tells 'wrangler dev' to use the preview_id for CLUSTER_KV.
[env.dev.kv_namespaces]
CLUSTER_KV = { preview_id = "25424bdebf90459ea61121e9b3dfc4ee" }


# Staging environment configuration
# Inherits from top-level, uses production KV and D1 bindings
[env.staging]
name = "earthquake" # Explicitly set name for staging environment
main = "src/worker.js"
# For KV, staging uses the production ID. This is consistent with original.
kv_namespaces = [
  { binding = "CLUSTER_KV", id = "2e7c7b5faf2f47868a048bd8043edebc" }
]
# For D1, staging uses the production database_id. This is consistent with original.
d1_databases = [
  { binding = "DB", database_name = "PrimaryDB", database_id = "8a0a26e9-ba3c-4984-9023-c1803f611a05" }
]


# D1 Database binding for primary data
# -----------------------------------------------------------------------------------------
# IMPORTANT INSTRUCTIONS FOR THE USER:
# 1. Create D1 Database:
#    You need to create a D1 database using the Wrangler CLI.
#    Run this command in your terminal:
#      wrangler d1 create PrimaryDB
#
# 2. Update IDs Below:
#    Wrangler will output a 'database_id' for the created D1 database.
#    Replace "REPLACE_WITH_PRODUCTION_D1_ID" with this ID for your production database.
#    It is also recommended to create a separate D1 database for preview/local development
#    and update "REPLACE_WITH_PREVIEW_D1_ID" accordingly. You can run:
#      wrangler d1 create PrimaryDB-preview
#    Then use its ID for 'preview_database_id'.
#
# 3. Dashboard Configuration (Crucial for Git-integrated Workers):
#    For Cloudflare Workers projects using Git integration, D1 bindings configured in the
#    Cloudflare Dashboard (Worker -> Settings -> Variables & Secrets -> D1 Database Bindings)
#    often take precedence for deployed environments (production and preview).
#    Ensure you also configure the 'DB' binding there, pointing it to the
#    respective D1 databases for your production and preview environments.
#    This wrangler.toml configuration is especially useful for local development
#    with `wrangler dev`.
# -----------------------------------------------------------------------------------------

# This explicitly tells 'wrangler dev' (local development) to use the preview_database_id for DB.
[env.dev.d1_databases]
DB = { preview_database_id = "57ba069c-5763-41c3-965d-0df87b0ef26b" }


[triggers]
crons = ["*/1 * * * *"] # Run every minute

# If you have other bindings (like R2, Services), define them here too.
# Refer to Cloudflare Wrangler documentation for more details.
# wrangler.toml (wrangler v3.88.0^)
[observability.logs]
enabled = true